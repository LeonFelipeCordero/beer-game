// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Board struct {
	ID             string     `json:"id"`
	Name           string     `json:"name"`
	State          BoardState `json:"state"`
	Full           bool       `json:"full"`
	Finished       bool       `json:"finished"`
	CreatedAt      time.Time  `json:"createdAt"`
	Players        []*Player  `json:"players"`
	Orders         []*Order   `json:"orders"`
	AvailableRoles []*Role    `json:"availableRoles"`
}

type Mutation struct {
}

type Order struct {
	ID             string     `json:"id"`
	Amount         int64      `json:"amount"`
	OriginalAmount int64      `json:"originalAmount"`
	State          OrderState `json:"state"`
	Type           OrderType  `json:"type"`
	Sender         *Player    `json:"sender"`
	Receiver       *Player    `json:"receiver,omitempty"`
	Board          *Board     `json:"board"`
	CreatedAt      time.Time  `json:"createdAt"`
}

type Player struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Role        Role     `json:"role"`
	Stock       int64    `json:"stock"`
	Backlog     int64    `json:"backlog"`
	WeeklyOrder int64    `json:"weeklyOrder"`
	LastOrder   int64    `json:"lastOrder"`
	CPU         bool     `json:"cpu"`
	Board       *Board   `json:"board"`
	Orders      []*Order `json:"orders"`
}

type Query struct {
}

type Response struct {
	Message *string `json:"message,omitempty"`
	Status  *int64  `json:"status,omitempty"`
}

type Subscription struct {
	Board         *Board    `json:"board,omitempty"`
	NewOrder      *Order    `json:"newOrder,omitempty"`
	OrderDelivery *Order    `json:"orderDelivery,omitempty"`
	Player        *Player   `json:"player,omitempty"`
	CurrentTime   time.Time `json:"currentTime"`
}

type BoardState string

const (
	BoardStateCreated  BoardState = "CREATED"
	BoardStateRunning  BoardState = "RUNNING"
	BoardStateFinished BoardState = "FINISHED"
)

var AllBoardState = []BoardState{
	BoardStateCreated,
	BoardStateRunning,
	BoardStateFinished,
}

func (e BoardState) IsValid() bool {
	switch e {
	case BoardStateCreated, BoardStateRunning, BoardStateFinished:
		return true
	}
	return false
}

func (e BoardState) String() string {
	return string(e)
}

func (e *BoardState) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BoardState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BoardState", str)
	}
	return nil
}

func (e BoardState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderState string

const (
	OrderStatePending   OrderState = "PENDING"
	OrderStateDelivered OrderState = "DELIVERED"
)

var AllOrderState = []OrderState{
	OrderStatePending,
	OrderStateDelivered,
}

func (e OrderState) IsValid() bool {
	switch e {
	case OrderStatePending, OrderStateDelivered:
		return true
	}
	return false
}

func (e OrderState) String() string {
	return string(e)
}

func (e *OrderState) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderState", str)
	}
	return nil
}

func (e OrderState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderType string

const (
	OrderTypePlayerOrder OrderType = "PLAYER_ORDER"
	OrderTypeCPUOrder    OrderType = "CPU_ORDER"
)

var AllOrderType = []OrderType{
	OrderTypePlayerOrder,
	OrderTypeCPUOrder,
}

func (e OrderType) IsValid() bool {
	switch e {
	case OrderTypePlayerOrder, OrderTypeCPUOrder:
		return true
	}
	return false
}

func (e OrderType) String() string {
	return string(e)
}

func (e *OrderType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderType", str)
	}
	return nil
}

func (e OrderType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleRetailer   Role = "RETAILER"
	RoleWholesaler Role = "WHOLESALER"
	RoleFactory    Role = "FACTORY"
)

var AllRole = []Role{
	RoleRetailer,
	RoleWholesaler,
	RoleFactory,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleRetailer, RoleWholesaler, RoleFactory:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
