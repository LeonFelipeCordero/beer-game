// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package graph

import (
	"context"
	"time"

	"github.com/Yamashou/gqlgenc/clientv2"
)

type BeerGameGraphQLClient interface {
	CreateBoard(ctx context.Context, name *string, interceptors ...clientv2.RequestInterceptor) (*CreateBoard, error)
	GetBoardByName(ctx context.Context, name *string, interceptors ...clientv2.RequestInterceptor) (*GetBoardByName, error)
	GetBoard(ctx context.Context, id *string, interceptors ...clientv2.RequestInterceptor) (*GetBoard, error)
	CreateOrder(ctx context.Context, receiverID *string, interceptors ...clientv2.RequestInterceptor) (*CreateOrder, error)
	DeliverOrder(ctx context.Context, orderID *string, amount *int64, interceptors ...clientv2.RequestInterceptor) (*DeliverOrder, error)
	AddPlayer(ctx context.Context, boardID *string, role *Role, interceptors ...clientv2.RequestInterceptor) (*AddPlayer, error)
	GetPlayer(ctx context.Context, playerID *string, interceptors ...clientv2.RequestInterceptor) (*GetPlayer, error)
	UpdateWeeklyOrder(ctx context.Context, playerID *string, amount *int64, interceptors ...clientv2.RequestInterceptor) (*UpdateWeeklyOrder, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli clientv2.HttpClient, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) BeerGameGraphQLClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type CreateBoard_CreateBoard struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBoard_CreateBoard) GetID() string {
	if t == nil {
		t = &CreateBoard_CreateBoard{}
	}
	return t.ID
}

type GetBoardByName_GetBoardByName struct {
	Full bool   "json:\"full\" graphql:\"full\""
	ID   string "json:\"id\" graphql:\"id\""
}

func (t *GetBoardByName_GetBoardByName) GetFull() bool {
	if t == nil {
		t = &GetBoardByName_GetBoardByName{}
	}
	return t.Full
}
func (t *GetBoardByName_GetBoardByName) GetID() string {
	if t == nil {
		t = &GetBoardByName_GetBoardByName{}
	}
	return t.ID
}

type GetBoard_GetBoard_Players struct {
	ID   string "json:\"id\" graphql:\"id\""
	Role Role   "json:\"role\" graphql:\"role\""
}

func (t *GetBoard_GetBoard_Players) GetID() string {
	if t == nil {
		t = &GetBoard_GetBoard_Players{}
	}
	return t.ID
}
func (t *GetBoard_GetBoard_Players) GetRole() *Role {
	if t == nil {
		t = &GetBoard_GetBoard_Players{}
	}
	return &t.Role
}

type GetBoard_GetBoard struct {
	AvailableRoles []*Role                      "json:\"availableRoles\" graphql:\"availableRoles\""
	Full           bool                         "json:\"full\" graphql:\"full\""
	ID             string                       "json:\"id\" graphql:\"id\""
	Name           string                       "json:\"name\" graphql:\"name\""
	Players        []*GetBoard_GetBoard_Players "json:\"players\" graphql:\"players\""
	State          BoardState                   "json:\"state\" graphql:\"state\""
}

func (t *GetBoard_GetBoard) GetAvailableRoles() []*Role {
	if t == nil {
		t = &GetBoard_GetBoard{}
	}
	return t.AvailableRoles
}
func (t *GetBoard_GetBoard) GetFull() bool {
	if t == nil {
		t = &GetBoard_GetBoard{}
	}
	return t.Full
}
func (t *GetBoard_GetBoard) GetID() string {
	if t == nil {
		t = &GetBoard_GetBoard{}
	}
	return t.ID
}
func (t *GetBoard_GetBoard) GetName() string {
	if t == nil {
		t = &GetBoard_GetBoard{}
	}
	return t.Name
}
func (t *GetBoard_GetBoard) GetPlayers() []*GetBoard_GetBoard_Players {
	if t == nil {
		t = &GetBoard_GetBoard{}
	}
	return t.Players
}
func (t *GetBoard_GetBoard) GetState() *BoardState {
	if t == nil {
		t = &GetBoard_GetBoard{}
	}
	return &t.State
}

type CreateOrder_CreateOrder struct {
	CreatedAt      time.Time  "json:\"createdAt\" graphql:\"createdAt\""
	ID             string     "json:\"id\" graphql:\"id\""
	OriginalAmount int64      "json:\"originalAmount\" graphql:\"originalAmount\""
	State          OrderState "json:\"state\" graphql:\"state\""
	Type           OrderType  "json:\"type\" graphql:\"type\""
}

func (t *CreateOrder_CreateOrder) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateOrder_CreateOrder{}
	}
	return &t.CreatedAt
}
func (t *CreateOrder_CreateOrder) GetID() string {
	if t == nil {
		t = &CreateOrder_CreateOrder{}
	}
	return t.ID
}
func (t *CreateOrder_CreateOrder) GetOriginalAmount() int64 {
	if t == nil {
		t = &CreateOrder_CreateOrder{}
	}
	return t.OriginalAmount
}
func (t *CreateOrder_CreateOrder) GetState() *OrderState {
	if t == nil {
		t = &CreateOrder_CreateOrder{}
	}
	return &t.State
}
func (t *CreateOrder_CreateOrder) GetType() *OrderType {
	if t == nil {
		t = &CreateOrder_CreateOrder{}
	}
	return &t.Type
}

type DeliverOrder_DeliverOrder struct {
	Message *string "json:\"message,omitempty\" graphql:\"message\""
	Status  *int64  "json:\"status,omitempty\" graphql:\"status\""
}

func (t *DeliverOrder_DeliverOrder) GetMessage() *string {
	if t == nil {
		t = &DeliverOrder_DeliverOrder{}
	}
	return t.Message
}
func (t *DeliverOrder_DeliverOrder) GetStatus() *int64 {
	if t == nil {
		t = &DeliverOrder_DeliverOrder{}
	}
	return t.Status
}

type AddPlayer_AddPlayer struct {
	ID   string "json:\"id\" graphql:\"id\""
	Role Role   "json:\"role\" graphql:\"role\""
}

func (t *AddPlayer_AddPlayer) GetID() string {
	if t == nil {
		t = &AddPlayer_AddPlayer{}
	}
	return t.ID
}
func (t *AddPlayer_AddPlayer) GetRole() *Role {
	if t == nil {
		t = &AddPlayer_AddPlayer{}
	}
	return &t.Role
}

type GetPlayer_GetPlayer_Orders_Receiver struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetPlayer_GetPlayer_Orders_Receiver) GetID() string {
	if t == nil {
		t = &GetPlayer_GetPlayer_Orders_Receiver{}
	}
	return t.ID
}

type GetPlayer_GetPlayer_Orders_Sender struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetPlayer_GetPlayer_Orders_Sender) GetID() string {
	if t == nil {
		t = &GetPlayer_GetPlayer_Orders_Sender{}
	}
	return t.ID
}

type GetPlayer_GetPlayer_Orders struct {
	CreatedAt      time.Time                            "json:\"createdAt\" graphql:\"createdAt\""
	ID             string                               "json:\"id\" graphql:\"id\""
	OriginalAmount int64                                "json:\"originalAmount\" graphql:\"originalAmount\""
	Receiver       *GetPlayer_GetPlayer_Orders_Receiver "json:\"receiver,omitempty\" graphql:\"receiver\""
	Sender         GetPlayer_GetPlayer_Orders_Sender    "json:\"sender\" graphql:\"sender\""
	State          OrderState                           "json:\"state\" graphql:\"state\""
}

func (t *GetPlayer_GetPlayer_Orders) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetPlayer_GetPlayer_Orders{}
	}
	return &t.CreatedAt
}
func (t *GetPlayer_GetPlayer_Orders) GetID() string {
	if t == nil {
		t = &GetPlayer_GetPlayer_Orders{}
	}
	return t.ID
}
func (t *GetPlayer_GetPlayer_Orders) GetOriginalAmount() int64 {
	if t == nil {
		t = &GetPlayer_GetPlayer_Orders{}
	}
	return t.OriginalAmount
}
func (t *GetPlayer_GetPlayer_Orders) GetReceiver() *GetPlayer_GetPlayer_Orders_Receiver {
	if t == nil {
		t = &GetPlayer_GetPlayer_Orders{}
	}
	return t.Receiver
}
func (t *GetPlayer_GetPlayer_Orders) GetSender() *GetPlayer_GetPlayer_Orders_Sender {
	if t == nil {
		t = &GetPlayer_GetPlayer_Orders{}
	}
	return &t.Sender
}
func (t *GetPlayer_GetPlayer_Orders) GetState() *OrderState {
	if t == nil {
		t = &GetPlayer_GetPlayer_Orders{}
	}
	return &t.State
}

type GetPlayer_GetPlayer struct {
	Backlog     int64                         "json:\"backlog\" graphql:\"backlog\""
	ID          string                        "json:\"id\" graphql:\"id\""
	LastOrder   int64                         "json:\"lastOrder\" graphql:\"lastOrder\""
	Orders      []*GetPlayer_GetPlayer_Orders "json:\"orders\" graphql:\"orders\""
	Role        Role                          "json:\"role\" graphql:\"role\""
	Stock       int64                         "json:\"stock\" graphql:\"stock\""
	WeeklyOrder int64                         "json:\"weeklyOrder\" graphql:\"weeklyOrder\""
}

func (t *GetPlayer_GetPlayer) GetBacklog() int64 {
	if t == nil {
		t = &GetPlayer_GetPlayer{}
	}
	return t.Backlog
}
func (t *GetPlayer_GetPlayer) GetID() string {
	if t == nil {
		t = &GetPlayer_GetPlayer{}
	}
	return t.ID
}
func (t *GetPlayer_GetPlayer) GetLastOrder() int64 {
	if t == nil {
		t = &GetPlayer_GetPlayer{}
	}
	return t.LastOrder
}
func (t *GetPlayer_GetPlayer) GetOrders() []*GetPlayer_GetPlayer_Orders {
	if t == nil {
		t = &GetPlayer_GetPlayer{}
	}
	return t.Orders
}
func (t *GetPlayer_GetPlayer) GetRole() *Role {
	if t == nil {
		t = &GetPlayer_GetPlayer{}
	}
	return &t.Role
}
func (t *GetPlayer_GetPlayer) GetStock() int64 {
	if t == nil {
		t = &GetPlayer_GetPlayer{}
	}
	return t.Stock
}
func (t *GetPlayer_GetPlayer) GetWeeklyOrder() int64 {
	if t == nil {
		t = &GetPlayer_GetPlayer{}
	}
	return t.WeeklyOrder
}

type UpdateWeeklyOrder_UpdateWeeklyOrder struct {
	Message *string "json:\"message,omitempty\" graphql:\"message\""
	Status  *int64  "json:\"status,omitempty\" graphql:\"status\""
}

func (t *UpdateWeeklyOrder_UpdateWeeklyOrder) GetMessage() *string {
	if t == nil {
		t = &UpdateWeeklyOrder_UpdateWeeklyOrder{}
	}
	return t.Message
}
func (t *UpdateWeeklyOrder_UpdateWeeklyOrder) GetStatus() *int64 {
	if t == nil {
		t = &UpdateWeeklyOrder_UpdateWeeklyOrder{}
	}
	return t.Status
}

type CreateBoard struct {
	CreateBoard *CreateBoard_CreateBoard "json:\"createBoard,omitempty\" graphql:\"createBoard\""
}

func (t *CreateBoard) GetCreateBoard() *CreateBoard_CreateBoard {
	if t == nil {
		t = &CreateBoard{}
	}
	return t.CreateBoard
}

type GetBoardByName struct {
	GetBoardByName *GetBoardByName_GetBoardByName "json:\"getBoardByName,omitempty\" graphql:\"getBoardByName\""
}

func (t *GetBoardByName) GetGetBoardByName() *GetBoardByName_GetBoardByName {
	if t == nil {
		t = &GetBoardByName{}
	}
	return t.GetBoardByName
}

type GetBoard struct {
	GetBoard *GetBoard_GetBoard "json:\"getBoard,omitempty\" graphql:\"getBoard\""
}

func (t *GetBoard) GetGetBoard() *GetBoard_GetBoard {
	if t == nil {
		t = &GetBoard{}
	}
	return t.GetBoard
}

type CreateOrder struct {
	CreateOrder *CreateOrder_CreateOrder "json:\"createOrder,omitempty\" graphql:\"createOrder\""
}

func (t *CreateOrder) GetCreateOrder() *CreateOrder_CreateOrder {
	if t == nil {
		t = &CreateOrder{}
	}
	return t.CreateOrder
}

type DeliverOrder struct {
	DeliverOrder *DeliverOrder_DeliverOrder "json:\"deliverOrder,omitempty\" graphql:\"deliverOrder\""
}

func (t *DeliverOrder) GetDeliverOrder() *DeliverOrder_DeliverOrder {
	if t == nil {
		t = &DeliverOrder{}
	}
	return t.DeliverOrder
}

type AddPlayer struct {
	AddPlayer *AddPlayer_AddPlayer "json:\"addPlayer,omitempty\" graphql:\"addPlayer\""
}

func (t *AddPlayer) GetAddPlayer() *AddPlayer_AddPlayer {
	if t == nil {
		t = &AddPlayer{}
	}
	return t.AddPlayer
}

type GetPlayer struct {
	GetPlayer *GetPlayer_GetPlayer "json:\"getPlayer,omitempty\" graphql:\"getPlayer\""
}

func (t *GetPlayer) GetGetPlayer() *GetPlayer_GetPlayer {
	if t == nil {
		t = &GetPlayer{}
	}
	return t.GetPlayer
}

type UpdateWeeklyOrder struct {
	UpdateWeeklyOrder *UpdateWeeklyOrder_UpdateWeeklyOrder "json:\"updateWeeklyOrder,omitempty\" graphql:\"updateWeeklyOrder\""
}

func (t *UpdateWeeklyOrder) GetUpdateWeeklyOrder() *UpdateWeeklyOrder_UpdateWeeklyOrder {
	if t == nil {
		t = &UpdateWeeklyOrder{}
	}
	return t.UpdateWeeklyOrder
}

const CreateBoardDocument = `mutation createBoard ($name: String) {
	createBoard(name: $name) {
		id
	}
}
`

func (c *Client) CreateBoard(ctx context.Context, name *string, interceptors ...clientv2.RequestInterceptor) (*CreateBoard, error) {
	vars := map[string]any{
		"name": name,
	}

	var res CreateBoard
	if err := c.Client.Post(ctx, "createBoard", CreateBoardDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetBoardByNameDocument = `query getBoardByName ($name: String) {
	getBoardByName(name: $name) {
		id
		full
	}
}
`

func (c *Client) GetBoardByName(ctx context.Context, name *string, interceptors ...clientv2.RequestInterceptor) (*GetBoardByName, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetBoardByName
	if err := c.Client.Post(ctx, "getBoardByName", GetBoardByNameDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetBoardDocument = `query getBoard ($id: String) {
	getBoard(id: $id) {
		id
		name
		state
		full
		players {
			id
			role
		}
		availableRoles
	}
}
`

func (c *Client) GetBoard(ctx context.Context, id *string, interceptors ...clientv2.RequestInterceptor) (*GetBoard, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetBoard
	if err := c.Client.Post(ctx, "getBoard", GetBoardDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateOrderDocument = `mutation createOrder ($receiverId: String) {
	createOrder(receiverId: $receiverId) {
		id
		originalAmount
		state
		type
		createdAt
	}
}
`

func (c *Client) CreateOrder(ctx context.Context, receiverID *string, interceptors ...clientv2.RequestInterceptor) (*CreateOrder, error) {
	vars := map[string]any{
		"receiverId": receiverID,
	}

	var res CreateOrder
	if err := c.Client.Post(ctx, "createOrder", CreateOrderDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeliverOrderDocument = `mutation deliverOrder ($orderId: String, $amount: Int) {
	deliverOrder(orderId: $orderId, amount: $amount) {
		message
		status
	}
}
`

func (c *Client) DeliverOrder(ctx context.Context, orderID *string, amount *int64, interceptors ...clientv2.RequestInterceptor) (*DeliverOrder, error) {
	vars := map[string]any{
		"orderId": orderID,
		"amount":  amount,
	}

	var res DeliverOrder
	if err := c.Client.Post(ctx, "deliverOrder", DeliverOrderDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const AddPlayerDocument = `mutation addPlayer ($boardId: String, $role: Role) {
	addPlayer(boardId: $boardId, role: $role) {
		id
		role
	}
}
`

func (c *Client) AddPlayer(ctx context.Context, boardID *string, role *Role, interceptors ...clientv2.RequestInterceptor) (*AddPlayer, error) {
	vars := map[string]any{
		"boardId": boardID,
		"role":    role,
	}

	var res AddPlayer
	if err := c.Client.Post(ctx, "addPlayer", AddPlayerDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetPlayerDocument = `query getPlayer ($playerId: String) {
	getPlayer(playerId: $playerId) {
		id
		role
		stock
		backlog
		weeklyOrder
		lastOrder
		orders {
			id
			originalAmount
			state
			createdAt
			receiver {
				id
			}
			sender {
				id
			}
		}
	}
}
`

func (c *Client) GetPlayer(ctx context.Context, playerID *string, interceptors ...clientv2.RequestInterceptor) (*GetPlayer, error) {
	vars := map[string]any{
		"playerId": playerID,
	}

	var res GetPlayer
	if err := c.Client.Post(ctx, "getPlayer", GetPlayerDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateWeeklyOrderDocument = `mutation updateWeeklyOrder ($playerId: String, $amount: Int) {
	updateWeeklyOrder(playerId: $playerId, amount: $amount) {
		message
		status
	}
}
`

func (c *Client) UpdateWeeklyOrder(ctx context.Context, playerID *string, amount *int64, interceptors ...clientv2.RequestInterceptor) (*UpdateWeeklyOrder, error) {
	vars := map[string]any{
		"playerId": playerID,
		"amount":   amount,
	}

	var res UpdateWeeklyOrder
	if err := c.Client.Post(ctx, "updateWeeklyOrder", UpdateWeeklyOrderDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	CreateBoardDocument:       "createBoard",
	GetBoardByNameDocument:    "getBoardByName",
	GetBoardDocument:          "getBoard",
	CreateOrderDocument:       "createOrder",
	DeliverOrderDocument:      "deliverOrder",
	AddPlayerDocument:         "addPlayer",
	GetPlayerDocument:         "getPlayer",
	UpdateWeeklyOrderDocument: "updateWeeklyOrder",
}
