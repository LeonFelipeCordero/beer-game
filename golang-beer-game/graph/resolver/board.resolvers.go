package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/LeonFelipeCordero/golang-beer-game/graph"
	"github.com/LeonFelipeCordero/golang-beer-game/graph/model"
)

// Players is the resolver for the players field.
func (r *boardResolver) Players(ctx context.Context, obj *model.Board) ([]*model.Player, error) {
	return r.PlayerApiAdapter.GetPlayersByBoard(ctx, obj.ID)
}

// Orders is the resolver for the orders field.
func (r *boardResolver) Orders(ctx context.Context, obj *model.Board) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: Orders - orders"))
}

// AvailableRoles is the resolver for the availableRoles field.
func (r *boardResolver) AvailableRoles(ctx context.Context, obj *model.Board) ([]*model.Role, error) {
	return r.BoardApiAdapter.GetAvailableRoles(ctx, obj.ID)
}

// CreateBoard is the resolver for the createBoard field.
func (r *mutationResolver) CreateBoard(ctx context.Context, name *string) (*model.Board, error) {
	return r.BoardApiAdapter.Create(ctx, *name)
}

// GetBoard is the resolver for the getBoard field.
func (r *queryResolver) GetBoard(ctx context.Context, id *string) (*model.Board, error) {
	return r.BoardApiAdapter.Get(ctx, *id)
}

// GetBoardByName is the resolver for the getBoardByName field.
func (r *queryResolver) GetBoardByName(ctx context.Context, name *string) (*model.Board, error) {
	return r.BoardApiAdapter.GetByName(ctx, *name)
}

// Board is the resolver for the board field.
func (r *subscriptionResolver) Board(ctx context.Context, boardID *string) (<-chan *model.Board, error) {
	panic(fmt.Errorf("not implemented: Board - board"))
}

// Board returns graph.BoardResolver implementation.
func (r *Resolver) Board() graph.BoardResolver { return &boardResolver{r} }

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

// Subscription returns graph.SubscriptionResolver implementation.
func (r *Resolver) Subscription() graph.SubscriptionResolver { return &subscriptionResolver{r} }

type boardResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
