// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package storage

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteAllOrders = `-- name: DeleteAllOrders :exec
delete
from orders
`

func (q *Queries) DeleteAllOrders(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllOrders)
	return err
}

const findOrderByBoardId = `-- name: FindOrderByBoardId :many
with boad_players as (select b.board_id,
                             player_id
                      from board b
                               left join player p on b.board_id = p.board_id
                      where b.board_id = $1)
select o.order_id, o.amount, o.original_amount, o.type, o.state, o.sender_id, o.receiver_id, o.created_at, o.updated_at
from orders o,
     boad_players bp
where o.sender_id = bp.player_id
   or o.receiver_id = bp.player_id
group by o.order_id
`

func (q *Queries) FindOrderByBoardId(ctx context.Context, boardID pgtype.UUID) ([]Order, error) {
	rows, err := q.db.Query(ctx, findOrderByBoardId, boardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.Amount,
			&i.OriginalAmount,
			&i.Type,
			&i.State,
			&i.SenderID,
			&i.ReceiverID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOrderById = `-- name: FindOrderById :one
select order_id, amount, original_amount, type, state, sender_id, receiver_id, created_at, updated_at
from orders
where order_id = $1
`

func (q *Queries) FindOrderById(ctx context.Context, orderID pgtype.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, findOrderById, orderID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.Amount,
		&i.OriginalAmount,
		&i.Type,
		&i.State,
		&i.SenderID,
		&i.ReceiverID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOrderByPlayerId = `-- name: FindOrderByPlayerId :many
select order_id, amount, original_amount, type, state, sender_id, receiver_id, created_at, updated_at
from orders
where sender_id = $1
   or receiver_id = $1
`

func (q *Queries) FindOrderByPlayerId(ctx context.Context, senderID pgtype.UUID) ([]Order, error) {
	rows, err := q.db.Query(ctx, findOrderByPlayerId, senderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.Amount,
			&i.OriginalAmount,
			&i.Type,
			&i.State,
			&i.SenderID,
			&i.ReceiverID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAsFilled = `-- name: MarkAsFilled :one
update orders
set state  = 'DELIVERED',
    amount = $2
where order_id = $1
returning order_id, amount, original_amount, type, state, sender_id, receiver_id, created_at, updated_at
`

type MarkAsFilledParams struct {
	OrderID pgtype.UUID
	Amount  int64
}

func (q *Queries) MarkAsFilled(ctx context.Context, arg MarkAsFilledParams) (Order, error) {
	row := q.db.QueryRow(ctx, markAsFilled, arg.OrderID, arg.Amount)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.Amount,
		&i.OriginalAmount,
		&i.Type,
		&i.State,
		&i.SenderID,
		&i.ReceiverID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const saveCpuOrder = `-- name: SaveCpuOrder :one
insert into orders(amount, original_amount, type, sender_id)
values ($1, $1, $2, $3)
returning order_id, amount, original_amount, type, state, sender_id, receiver_id, created_at, updated_at
`

type SaveCpuOrderParams struct {
	Amount   int64
	Type     string
	SenderID pgtype.UUID
}

func (q *Queries) SaveCpuOrder(ctx context.Context, arg SaveCpuOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, saveCpuOrder, arg.Amount, arg.Type, arg.SenderID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.Amount,
		&i.OriginalAmount,
		&i.Type,
		&i.State,
		&i.SenderID,
		&i.ReceiverID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const saveOrder = `-- name: SaveOrder :one
insert into orders(amount, original_amount, type, sender_id, receiver_id)
values ($1, $1, $2, $3, $4)
returning order_id, amount, original_amount, type, state, sender_id, receiver_id, created_at, updated_at
`

type SaveOrderParams struct {
	Amount     int64
	Type       string
	SenderID   pgtype.UUID
	ReceiverID pgtype.UUID
}

func (q *Queries) SaveOrder(ctx context.Context, arg SaveOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, saveOrder,
		arg.Amount,
		arg.Type,
		arg.SenderID,
		arg.ReceiverID,
	)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.Amount,
		&i.OriginalAmount,
		&i.Type,
		&i.State,
		&i.SenderID,
		&i.ReceiverID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
