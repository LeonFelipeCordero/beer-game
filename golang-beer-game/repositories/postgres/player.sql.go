// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: player.sql

package storage

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteAllPlayers = `-- name: DeleteAllPlayers :exec
delete from player
`

func (q *Queries) DeleteAllPlayers(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllPlayers)
	return err
}

const findPlayerByBoardId = `-- name: FindPlayerByBoardId :many
select player_id, name, role, stock, backlog, weekly_order, last_order, cpu, board_id, created_at, updated_at
from player
where board_id = $1
`

func (q *Queries) FindPlayerByBoardId(ctx context.Context, boardID pgtype.UUID) ([]Player, error) {
	rows, err := q.db.Query(ctx, findPlayerByBoardId, boardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.PlayerID,
			&i.Name,
			&i.Role,
			&i.Stock,
			&i.Backlog,
			&i.WeeklyOrder,
			&i.LastOrder,
			&i.Cpu,
			&i.BoardID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPlayerById = `-- name: FindPlayerById :one
select player_id, name, role, stock, backlog, weekly_order, last_order, cpu, board_id, created_at, updated_at
from player
where player_id = $1
`

func (q *Queries) FindPlayerById(ctx context.Context, playerID pgtype.UUID) (Player, error) {
	row := q.db.QueryRow(ctx, findPlayerById, playerID)
	var i Player
	err := row.Scan(
		&i.PlayerID,
		&i.Name,
		&i.Role,
		&i.Stock,
		&i.Backlog,
		&i.WeeklyOrder,
		&i.LastOrder,
		&i.Cpu,
		&i.BoardID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlayerByRoleAndBoardId = `-- name: GetPlayerByRoleAndBoardId :one
select player_id, name, role, stock, backlog, weekly_order, last_order, cpu, board_id, created_at, updated_at
from player
where board_id = $1
and role = $2
`

type GetPlayerByRoleAndBoardIdParams struct {
	BoardID pgtype.UUID
	Role    string
}

func (q *Queries) GetPlayerByRoleAndBoardId(ctx context.Context, arg GetPlayerByRoleAndBoardIdParams) (Player, error) {
	row := q.db.QueryRow(ctx, getPlayerByRoleAndBoardId, arg.BoardID, arg.Role)
	var i Player
	err := row.Scan(
		&i.PlayerID,
		&i.Name,
		&i.Role,
		&i.Stock,
		&i.Backlog,
		&i.WeeklyOrder,
		&i.LastOrder,
		&i.Cpu,
		&i.BoardID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const savePlayer = `-- name: SavePlayer :one
insert into player(name,
                   role,
                   stock,
                   backlog,
                   weekly_order,
                   last_order,
                   cpu,
                   board_id)
values ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8)
returning player_id, name, role, stock, backlog, weekly_order, last_order, cpu, board_id, created_at, updated_at
`

type SavePlayerParams struct {
	Name        string
	Role        string
	Stock       int64
	Backlog     int64
	WeeklyOrder int64
	LastOrder   int64
	Cpu         bool
	BoardID     pgtype.UUID
}

func (q *Queries) SavePlayer(ctx context.Context, arg SavePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, savePlayer,
		arg.Name,
		arg.Role,
		arg.Stock,
		arg.Backlog,
		arg.WeeklyOrder,
		arg.LastOrder,
		arg.Cpu,
		arg.BoardID,
	)
	var i Player
	err := row.Scan(
		&i.PlayerID,
		&i.Name,
		&i.Role,
		&i.Stock,
		&i.Backlog,
		&i.WeeklyOrder,
		&i.LastOrder,
		&i.Cpu,
		&i.BoardID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePlayerNumbers = `-- name: UpdatePlayerNumbers :exec
update player
set stock        = $2,
    backlog      = $3,
    weekly_order = $4,
    last_order   = $5
where player_id = $1
`

type UpdatePlayerNumbersParams struct {
	PlayerID    pgtype.UUID
	Stock       int64
	Backlog     int64
	WeeklyOrder int64
	LastOrder   int64
}

func (q *Queries) UpdatePlayerNumbers(ctx context.Context, arg UpdatePlayerNumbersParams) error {
	_, err := q.db.Exec(ctx, updatePlayerNumbers,
		arg.PlayerID,
		arg.Stock,
		arg.Backlog,
		arg.WeeklyOrder,
		arg.LastOrder,
	)
	return err
}
