// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: board.sql

package storage

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteAllBoards = `-- name: DeleteAllBoards :exec
delete
from board
`

func (q *Queries) DeleteAllBoards(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllBoards)
	return err
}

const findBoardById = `-- name: FindBoardById :one
select board_id, name, state, is_full, is_finished, created_at, updated_at
from board
where board_id = $1
`

func (q *Queries) FindBoardById(ctx context.Context, boardID pgtype.UUID) (Board, error) {
	row := q.db.QueryRow(ctx, findBoardById, boardID)
	var i Board
	err := row.Scan(
		&i.BoardID,
		&i.Name,
		&i.State,
		&i.IsFull,
		&i.IsFinished,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findBoardByName = `-- name: FindBoardByName :one
select board_id, name, state, is_full, is_finished, created_at, updated_at
from board
where name = $1
`

func (q *Queries) FindBoardByName(ctx context.Context, name string) (Board, error) {
	row := q.db.QueryRow(ctx, findBoardByName, name)
	var i Board
	err := row.Scan(
		&i.BoardID,
		&i.Name,
		&i.State,
		&i.IsFull,
		&i.IsFinished,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findBoardByPlayerId = `-- name: FindBoardByPlayerId :one
select b.board_id, b.name, b.state, b.is_full, b.is_finished, b.created_at, b.updated_at
from board b
         left join player p on b.board_id = p.board_id
where p.player_id = $1
`

func (q *Queries) FindBoardByPlayerId(ctx context.Context, playerID pgtype.UUID) (Board, error) {
	row := q.db.QueryRow(ctx, findBoardByPlayerId, playerID)
	var i Board
	err := row.Scan(
		&i.BoardID,
		&i.Name,
		&i.State,
		&i.IsFull,
		&i.IsFinished,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAvailableRoles = `-- name: GetAvailableRoles :many
select p.role
from board b
left join player p on b.board_id = p.board_id
where b.board_id = $1
group by p.player_id
`

func (q *Queries) GetAvailableRoles(ctx context.Context, boardID pgtype.UUID) ([]pgtype.Text, error) {
	rows, err := q.db.Query(ctx, getAvailableRoles, boardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.Text
	for rows.Next() {
		var role pgtype.Text
		if err := rows.Scan(&role); err != nil {
			return nil, err
		}
		items = append(items, role)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRunningBoards = `-- name: GetRunningBoards :many
select board_id, name, state, is_full, is_finished, created_at, updated_at
from board
where state = 'RUNNING'
`

func (q *Queries) GetRunningBoards(ctx context.Context) ([]Board, error) {
	rows, err := q.db.Query(ctx, getRunningBoards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Board
	for rows.Next() {
		var i Board
		if err := rows.Scan(
			&i.BoardID,
			&i.Name,
			&i.State,
			&i.IsFull,
			&i.IsFinished,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveBoard = `-- name: SaveBoard :one
insert into board(name)
values ($1)
returning board_id, name, state, is_full, is_finished, created_at, updated_at
`

func (q *Queries) SaveBoard(ctx context.Context, name string) (Board, error) {
	row := q.db.QueryRow(ctx, saveBoard, name)
	var i Board
	err := row.Scan(
		&i.BoardID,
		&i.Name,
		&i.State,
		&i.IsFull,
		&i.IsFinished,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const startBoard = `-- name: StartBoard :exec
update board
set state   = 'RUNNING',
    is_full = true
where board_id = $1
`

func (q *Queries) StartBoard(ctx context.Context, boardID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, startBoard, boardID)
	return err
}
